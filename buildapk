#!/bin/bash

# --- Comprobar los argumentos de entrada ---
if [ "$#" -ne 3 ]; then
    echo "Uso: buildapk <nombre_carpeta> <id_app> \"<nombre_visible>\""
    echo "Ejemplo: buildapk mi-app com.miempresa.app \"Mi App de Prueba\""
    exit 1
fi

# --- Variables de los argumentos de entrada ---
FOLDER_NAME="$1"
APP_ID="$2"
APP_NAME="$3"

# --- Lista de archivos obligatorios ---
REQUIRED_FILES=(index.html style.css script.js icon.png splash.png)

# --- Validar que todos los archivos existan en el directorio actual ---
echo "--- Validando la existencia de archivos necesarios... ---"
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo "Error: Archivo '$file' no encontrado en el directorio actual."
        echo "Asegúrate de que todos los archivos necesarios estén presentes antes de ejecutar el script."
        exit 1
    fi
done
echo "Todos los archivos necesarios encontrados. Procediendo..."
echo ""

# --- Función para instalar ffmpeg si es necesario ---
install_ffmpeg() {
    echo "  - FFmpeg no se encontró. Necesario para redimensionar imágenes automáticamente."
    read -p "¿Quieres instalar FFmpeg ahora? (s/n): " choice
    if [[ "$choice" =~ ^[Ss]$ ]]; then
        echo "  - Instalando FFmpeg..."
        sudo dnf install -y ffmpeg
        if ! command -v ffmpeg &> /dev/null; then
            echo "Error: La instalación de FFmpeg falló. Saliendo."
            exit 1
        fi
    else
        echo "Operación cancelada por el usuario. Saliendo."
        exit 1
    fi
}

# --- Redimensionar imágenes si es necesario ---
echo "-> Verificando y redimensionando imágenes si es necesario..."

if ! command -v ffmpeg &> /dev/null || ! command -v ffprobe &> /dev/null; then
    install_ffmpeg
fi

# Redimensionar splash.png
SPLASH_DIMENSIONS=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 splash.png)
SPLASH_WIDTH=$(echo "$SPLASH_DIMENSIONS" | cut -d'x' -f1)
SPLASH_HEIGHT=$(echo "$SPLASH_DIMENSIONS" | cut -d'x' -f2)

if [ "$SPLASH_WIDTH" -lt 1920 ] || [ "$SPLASH_HEIGHT" -lt 1920 ]; then
    echo "  - La imagen splash.png ($SPLASH_WIDTH x $SPLASH_HEIGHT) es menor que el mínimo de 1920x1920."
    echo "  - Redimensionando a 1920x1920. Se creará una copia de seguridad."
    mv splash.png splash.png.bak
    ffmpeg -i splash.png.bak -vf "scale=1920:1920:force_original_aspect_ratio=decrease,pad=1920:1920:(ow-iw)/2:(oh-ih)/2" -y splash.png
    if [ $? -ne 0 ]; then echo "Error al redimensionar splash.png. Saliendo."; exit 1; fi
else
    echo "  - splash.png ya tiene las dimensiones correctas. Saltando."
fi

# Redimensionar icon.png
ICON_DIMENSIONS=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 icon.png)
ICON_WIDTH=$(echo "$ICON_DIMENSIONS" | cut -d'x' -f1)
ICON_HEIGHT=$(echo "$ICON_DIMENSIONS" | cut -d'x' -f2)

if [ "$ICON_WIDTH" -lt 1024 ] || [ "$ICON_HEIGHT" -lt 1024 ]; then
    echo "  - La imagen icon.png ($ICON_WIDTH x $ICON_HEIGHT) es menor que el mínimo de 1024x1024."
    echo "  - Redimensionando a 1024x1024."
    mv icon.png icon.png.bak
    ffmpeg -i icon.png.bak -vf "scale=1024:1024:force_original_aspect_ratio=decrease,pad=1024:1024:(ow-iw)/2:(oh-ih)/2" -y icon.png
    if [ $? -ne 0 ]; then echo "Error al redimensionar icon.png. Saliendo."; exit 1; fi
else
    echo "  - icon.png ya tiene las dimensiones correctas. Saltando."
fi


# 1. Crear el proyecto de Cordova
echo "-> Paso 1: Creando el proyecto de Cordova..."
cordova create "$FOLDER_NAME" "$APP_ID" "$APP_NAME" || { echo "Error al crear el proyecto. Saliendo."; exit 1; }

# 2. Mover archivos de la web a la carpeta www
echo "-> Paso 2: Limpiando y moviendo los archivos de la web..."
rm -rf "$FOLDER_NAME/www"
mkdir "$FOLDER_NAME/www"
mv index.html style.css script.js "$FOLDER_NAME/www/"

# 3. Mover los archivos de recursos (icono y splash)
echo "-> Paso 3: Moviendo los archivos de recursos..."
mkdir -p "$FOLDER_NAME/resources"
mv icon.png splash.png "$FOLDER_NAME/resources/"

# 4. Navegar al directorio del proyecto y agregar la plataforma Android
echo "-> Paso 4: Agregando la plataforma Android..."
cd "$FOLDER_NAME"
cordova platform add android || { echo "Error al agregar la plataforma Android. Saliendo."; exit 1; }

# 5. Generar iconos y splash screens
echo "-> Paso 5: Generando iconos y splash screens..."
cordova-res android || { echo "Error con cordova-res. Asegúrate de tenerlo instalado. Saliendo."; exit 1; }

# 6. Construir la APK
echo "-> Paso 6: Construyendo la APK de Android..."
cordova build android || { echo "Error al construir la APK. Revisa tus dependencias. Saliendo."; exit 1; }

# 7. Mover la APK a la carpeta principal
echo "-> Paso 7: Moviendo la APK a la carpeta raíz del proyecto..."
APK_PATH="platforms/android/app/build/outputs/apk/debug/app-debug.apk"
FINAL_PATH="." # La carpeta actual (raíz del proyecto)
if [ -f "$APK_PATH" ]; then
    mv "$APK_PATH" "$FINAL_PATH/"
    echo "¡La APK ha sido movida con éxito!"
    echo "Puedes encontrar el archivo en: $FOLDER_NAME/app-debug.apk"
else
    echo "Error: No se encontró la APK para moverla."
fi

echo "--- ¡Proceso completado! ---"
